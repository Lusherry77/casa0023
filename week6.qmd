# Google Earth Engine

## Summary

This week focused on Google Earth Engine (GEE), a cloud-based platform designed for planetary-scale geospatial analysis. Unlike desktop tools, GEE allows users to run spatial queries on petabytes of remote sensing data entirely in the cloud. The platform includes datasets like Landsat, MODIS, Sentinel, and various climate records, enabling long-term monitoring of urbanisation, vegetation, land degradation, and climate risks [@Gorelick2017].

We were introduced to the core components of the GEE environment, including object-based elements like ee.Image, ee.ImageCollection, and ee.FeatureCollection, and learned how to filter, map, and reduce them using server-side computation. One key concept was the difference between client- and server-side code, which directly impacts performance. Functions like reduceRegion(), linearFit(), or reduceNeighborhood() allow users to run spatial statistics, temporal trends, and neighbourhood-based analysis without ever downloading data [@Kochenour2020].

A major advantage of GEE is scalability—large area analysis across time becomes fast, reproducible, and shareable. Its open-access model and “analysis-ready” workflow have made it foundational in urban, ecological, and climate-focused remote sensing applications [@Amani2020]. However, working with GEE also requires attention to pixel scale, projection systems, and memory limits. While powerful, its reliance on scripting can be a barrier in some policy or NGO settings.Still, it represents a major shift from traditional GIS towards cloud-native, globally distributed geospatial science. As remote sensing moves from data scarcity to processing overload, platforms like GEE will be central to scalable, reproducible and policy-relevant Earth Observation workflows [@Gorelick2017; @Amani2020].

## Applications

GEE enables not just fast processing, but analytical depth—especially when moving beyond surface-level indices like NDVI. This week’s session introduced us to functions like reduceRegion(), reduceNeighborhood(), and band math operations, which have been applied in urban contexts to quantify green space quality, monitor land degradation, and detect micro-level temperature anomalies. In particular, the use of neighborhood-based reducers has helped researchers move from pixel-based averages to spatial texture metrics, capturing intra-urban heterogeneity such as informal housing patterns and patchy vegetation [@Kochenour2020]. One study combined this method with census layers to explore environmental inequality across Indian megacities—revealing that “greenness gaps” often align with caste and income divides [@Amani2020]. These approaches show that the strength of GEE lies not only in speed or scale, but in its capacity to link environmental signals to structural urban injustices.

Several other studies go further by integrating dimensionality reduction techniques such as PCA or tasseled cap transformations. These are used to extract spectral change trends or vegetation “complexity” in cities, and when combined with unsupervised clustering or temporal smoothing, enable long-term urban classification without the need for pre-labelled data [@Gorelick2017]. For example, in a workflow used for flood-prone slums in Jakarta, analysts used GEE to mask out built-up noise, isolate seasonal NDWI peaks, and classify chronic inundation zones without field data. This kind of flexible masking and multi-date filtering is also central to climate risk dashboards used by UN-Habitat and the World Bank. As more urban policy teams rely on Earth Observation to monitor SDG progress or heat mitigation plans, the demand for scalable, interpretable and well-documented workflows will likely grow. GEE provides not just the tools, but a shared language for that transition.

## Reflection

I didn’t expect to like GEE this much. At first, it felt overwhelming—I could understand the scripts, but editing functions or debugging still felt fragile. It made me think about how powerful tools don’t always mean accessible tools. If I struggled, how would someone in a small city office or NGO with no remote sensing background get started? GEE is amazing in what it can do, but its technical barrier can make it feel exclusive.

At the same time, I was genuinely impressed by what’s possible. Running a time series regression across years of data in just a few seconds felt like cheating. And it wasn’t just about speed—it was how GEE made me think differently. Not just about pixels, but about systems: about who gets to use these tools, whose data questions are answered, and who can challenge the results. GEE makes urban analysis scalable, but that scale also comes with responsibility. The fact that so much of the processing happens in the cloud makes it easy to forget the assumptions we’re building into our workflows—projection, scale, reducers, thresholds. This week made me realise that the map isn’t the final answer—it’s a story we choose to tell. And if I want to use GEE in policy one day, I’ll need to be as critical of my own scripts as I am of someone else’s dashboard.



